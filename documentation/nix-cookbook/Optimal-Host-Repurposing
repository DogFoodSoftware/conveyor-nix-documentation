<!-- breadcrumb: (Stack-Reference)Stack Reference|(Nix-Primer)Nix Primer|Optimal Host Repurposing -->
<section id="Scenario">
  <h1>Scenario</h1>
  <div class="p">
    You have VM hosts cycling through duties and you want to be able
    to take the warm VMs going off duty for one task to be quickly
    repurposed for another.
  </div>
  <div class="p">
    The atomicity, static link, and lazy builds allow us to provision
    software without regard to what else in installed the machine. So
    long as we're only adding well behaved packages, there's no need
    to worry about stepping on toes. A given package can neither break
    nor be broken by any other.
  </div>
  <div class="p">
    This fact allows us to set up a situation in which virtual hosts
    may be safely repurposed, allow us to use warm hosts
    efficiently. Assuming the rest of the provisioning process plays
    nice, there's no need to rebuild core systems from scratch except
    in very specific cases.
  </div>
  <div class="p">
    The more there's a need for hosts in many roles, and the more
    dynamic those demands are, the more useful this functionality
    is. If your host functionality is limited and a single uniform
    host configuration sufficies, then there's no space to gain on
    this front.
  </div>
</section>
<section id="Iterative-Steps">
  <h1>Iterative Steps</h1>
  <div class="p">
    <em>First</em>: Use one or more 'micro-distribution' to define the
    universe of potential packages for all host configurations in the
    universe of discourse.
  </div>
  <div class="p">
    <em>Second</em>: At some point, unused packages need to be
    cleared. However, we want to let the packages use more or less as
    much space as we can. In other words, let it fill any available
    space, and then trim as necessary.
  </div>
  <div class="p">
    Luckily, nix's management of 'generations' does exactly what we
    need. Ideally, this could be a live process that reacts to changes
    in the free disk space on the volume housing the nix store. An
    initial implementation could also make strides with a fixed target
    enforced prior to reacquisition.
  </div>
</section>
<section id="Caveats">
  <h1>Caveats</h1>
  <div class="p">
    Nix doesn't take any note of data. In many cases, it's not
    in-and-of-itself a complete solution.<span data-detail="detailed">
    If you use a build manager, such as Puppet or Chef, nix is not
    generally a replacement for these systems, though it can take—and
    we think better share—some of the responsibility that would
    otherwise be handled by the provisioning systems proper.</span>
  </div>
</section>
