<!-- breadcrumb: (Stack-Reference)Stack Reference|(Nix-Primer)Nix Primer|Creating Packages -->
<section id="Overview">
  <div id="slides">
    <ul class="slides-container">
      <li>
	<h2>Layout and bits.</h2>
	<ul class="p">
	  <li>A package begins with a directory. The directory name is
	    conventionally the package name.</li>
	  <li>Conventionally, unless multiple versions are needed,
	    there is a single 'default.nix' expression
	    per-package.</li>
	  <li>Multiple versions are stored
	    like <code>~/3.3.6.nix</code>
	    or <code>~/3.3.6/default.nix</code>; the latter useful
	    when there are auxiliary files specific to that
	    version.</li>
	</ul>
      </li>
      <li>
	<h2>Expressions 101</h2>
	<ul class="p">
	  <li>The expressions themselves are largely functions like:
	    <pre><code>
{ stdenv, fetchurl, gcc, zlib }:

stdenv.mkDerivation rec {
   ...
}
	    </code></pre></li>
	  <li>When invoked, the function expects a set containing
	    exactly the fields named before the '<code>:</code>'.</li>
	  <li>Those are the package names of the build inputs needed
	    to evualate the expression and create a derivation.</li>
	  <li>After the '<code>:</code>' is the function body.</li>
	</ul>
      </li>
      <li>
	<h2>Expressions 101 (cont.)</h2>
	<div class="p">
	  Don't get caught up in these technicalities, though. For actual usage:
	  <ul>
	    <li>'<code>{ stdenv, fetchurl, gcc, zlib }</code>' is
	      this packages lits of dependencies.</li>
	    <li>'<code>stdenv.mkDerivation rec { ... }</code>' defines your
		package spec.</li>
	    <li>The package spec is itself a set of attributes
	      processed by the '<code>mkDerivation</code>' function to
	      create the derivation on disk.</li>
	  </ul>
	</div>
      </li>
      <li>
	<h2>The builder:</h2>
	<ul class="p">
	  <li>The actual install itself is conventionally handled by a bash script.</li>
	  <li>If no builder is specified; a generic unix '<code>make /
	      make install</code>' builder is invoked.</li>
	  <li>The build script may be embedded in a string
	    interprolated string literal in the nix expression.</li>
	  <li>An external bash script may be specified.</li>
	  <li>Regardless of the source, the builder is invoked in a
	    'nix shell'. The shell environment provides access to the
	    named build inputs <em>and nothing else</em>. Certain magic
	    environment variables are set.</li>
	  <li>The builder itself can do anything, so long as the
	    builder plays nice and doesn't break out of the nix
	    environment.</li>
	</ul>
      </li>
    </ul>
    <nav class="slides-navigation">
      <a href="#" class="next">
        <i class="bi-icon bi-icon-chevron-right"></i>
      </a>
      <a href="#" class="prev">
        <i class="bi-icon bi-icon-chevron-left"></i>
      </a>
    </nav>
  </div>
</section>
