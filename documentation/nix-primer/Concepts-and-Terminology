<!-- breadcrumb: (Stack-Reference)Stack Reference|(Nix-Primer)Nix Primer|Concepts and Terminology -->
<section id="Overview">
  <div id="slides">
    <ul class="slides-container">
      <li>
	<h2>It's all about derivations.</h2>
	<ul class="p">
	  <li>The installed host system / runtime is a set of
	    derivations (plus any extra-nix stuff).</li>
	  <li>Building a package creates a derivation.</li>
	  <li>A derivation is absolutely static and immutable. Or at
	    least it should be.</li>
	  <li>In a word, nix is a derivations factory.</li>
	</ul>
      </li>
      <li>
	<h2>Package delivery guaranteed.</h2>
	<ul class="p">
	  <li>A package defines how to create one or more version
	    derivations at a particular point in time.</li>
	  <li>Any change to package specification or any input yields
	    unique derivations upon build.</li>
	  <li>For a given set of build inputs and a particular package
	    specification, a build should be dependently
	    repeatable.</li>
	</ul>
      </li>
      <li class="largest">
	<h2>Nix doesn't care about versions&#8230;</h2>
	<div class="p">
	  Nix doesn't care about versions, but you do. So nix tries to
	  accomodate.
	  <ul>
	    <li>A package may provide one or more versions.</li>
	    <li>Each version yields an entirely distinct derivation.</li>
	    <li>Nix only really cares about 'versions' as part of the
	      package name.</li>
	    <li>Conventionally, unless multiple versions are needed,
	      there is a single 'default.nix' expression
	      per-package.</li>
	    <li>Multiple versions are stored
	      like <code>~/3.3.6.nix</code>
	      or <code>~/3.3.6/default.nix</code>; the latter useful
	      when there are auxiliary files specific to that
	      version.</li>
	    <li>Nix selects the highest version available when none
	      specified.</li>
	  </ul>
	</div>
      </li>
      <li>
	<h2>Don't trust versions.</h2>
	<ul class="p">
	  <li>You can't rely on two derivations of the same package
	    version to be identical based soley on the version.</li>
	  <li>Recall that changing the package spec changes the
	    derivation.</li>
	  <li>It's ultimately the derivation where the rubber hits the
	    road. Packages and versions are merely the human-friendly
	    concepts we use to get there.</li>
	</ul>
      </li>
      <li>
	<h2>Intend to distribute.</h2>
	<ul class="p">
	  <li>You can think of a distribution as the history of set of
	    ostensibly coherent package specifications.</li>
	  <li>Since nix doesn't care anything about how an application is built, it's easy to integrate with existing application and deployment.
	</ul>
      </li>
    </ul>
    <nav class="slides-navigation">
      <a href="#" class="next">
        <i class="bi-icon bi-icon-chevron-right"></i>
      </a>
      <a href="#" class="prev">
        <i class="bi-icon bi-icon-chevron-left"></i>
      </a>
    </nav>
  </div>
</section>
