<div data-default-section-audience="sysadmin sysengineer"
     class="page-header">Key Features</div>
<section data-audience="all" id="Overview">
  <div class="p">
    Here we discuss some of the key features, as we see them of
    nix. The primary point of view is that of a system administrator
    or system engineer.
  </div>
</section>
<section id="Safe-Host-Repurposing">
  <h1>Safe Host Repurposing</h1>
  <div class="p">
    <em>Scenario</em>: You have VM hosts cycling through duties and
    you want to be able to take the warm VMs going off duty for one
    task to be repurposed for another.
  </div>
  <div class="p">
    <em>Possible Solution</em>: Define your deploy (or at least the
    system setup / package bits) in nix expressions. Because nix's
    build is atomic and lazy, you'll be able to deploy the expression
    for each ask to any machine, safely, without worrying over much
    about what's already installed on the machine.
  </div>
  <div class="p" data-detail="detailed">
    In appropriate environments, the cost would be never worse than
    deploying from a cold image, and in most cases will incur little
    if any setup at all, while everything in between is handled
    gracefully.
  </div>
  <div class="p" data-detail="detailed">
    Actually, if we add a process to clear disk space as needed (while
    respecting some sensible minimum), then we could let VMs build up
    history so they can cycle quickly. As they age into a duty,
    they'll make space as needed. You could do an easy affinity to
    naturally develop an arguably optimimum number of cycle optimized
    VMs.
  </div>
  <div class="p">
    <em>Caveats</em>: Of course, nix doesn't take any note of data. In
    many cases, it's not in-and-of-itself a complete solution, and
    this isn't to say that you shouldn't consider some kind of
    deployment manager.
  </div>
</section>
